services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'celery worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.celerybeat
    env_file:
      - .env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'celery beat' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  flower:
    build:
      context: .
      dockerfile: Dockerfile.flower
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    env_file:
      - .env
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  redis-data:

networks:
  app-network:
    driver: bridge 